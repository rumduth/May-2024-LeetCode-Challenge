class Solution {
public:
    long long maximumValueSum(vector<int>& nums, int k, vector<vector<int>>& edges) {
        int n = nums.size();
        long long nodeSum = 0;
        vector<int> netChange(n,0);
        for(int i = 0; i < n; i++){
            netChange[i] = (nums[i] ^ k) - nums[i];
            nodeSum += nums[i];
        }
        sort(netChange.begin(),netChange.end());
        for(int i = n - 1; i >= 1; i -= 2){
            long pairSum = netChange[i] + netChange[i-1];
            if(pairSum > 0)
                nodeSum += pairSum;
            else
                break;
           
        }
        return nodeSum;
    }
};
