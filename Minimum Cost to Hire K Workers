class Solution {
public:
    double mincostToHireWorkers(vector<int>& quality, vector<int>& wage, int k) {
        vector<pair<double, int>> workerRatios;
        int n = quality.size();
        for(int i = 0; i < n; i++){
            workerRatios.push_back({(double) wage[i] / quality[i], quality[i]});
        }
        sort(workerRatios.begin(),workerRatios.end());
        priority_queue<int> pq;
        double minSum = numeric_limits<double>::max();
        int totalQuality = 0;
        int cnt = 0;
        for(auto& [ratio, quality] : workerRatios){
            totalQuality += quality;
            cnt++;
            pq.push(quality);
            if(cnt == k){
                cnt--;
                minSum = min(minSum,totalQuality * ratio);
                totalQuality -= pq.top();
                pq.pop();
            }
        }
        return minSum;
    }
};
