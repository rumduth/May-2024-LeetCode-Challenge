class Solution {
public:
    void dfs(int i, int j, vector<vector<int>>& grid ,vector<vector<bool>>& visited, int sum, int& ans)
    {
        if(i < 0 || i == grid.size() || j < 0 || j == grid[0].size())
            return;
        if(visited[i][j] == true || grid[i][j] == 0)
            return;
        visited[i][j] = true;
        sum += grid[i][j];
        ans = max(ans,sum);
        dfs(i+1,j,grid,visited,sum,ans);
        dfs(i-1,j,grid,visited,sum,ans);
        dfs(i,j+1,grid,visited,sum,ans);
        dfs(i,j-1,grid,visited,sum,ans);
        visited[i][j] = false;

    }
    int getMaximumGold(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<bool>> visited(m,vector<bool>(n,false));

        int ans = 0;
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(grid[i][j] > 0)
                {
                    dfs(i,j,grid,visited,0,ans);
                }
            }
        }
        return ans;
    }
};
